require('dotenv').config();
const bcrypt = require('bcrypt');
const jwt    = require('jsonwebtoken');
const LogisticsPartner   = require('../schema/logisticsCompanySchema')

const generatePassword = () => {
    const password = generator.generate({
      length  : 12,
      numbers : true
    });
    return password
  }

module.exports = {

    register: async (reqObj, callback) => {
      try {
        const emailExists = await User.findOne({ email: reqObj.email });
        if (emailExists) {
          return callback({ code: 409, message: 'Email already exists' });
        }
    
        const clientId = 'LOG-' + Math.random().toString(16).slice(2, 10);
        const jwtSecretKey = process.env.APP_SECRET;
        const data = { time: Date(), clientId };
        const token = jwt.sign(data, jwtSecretKey);
        const autoGeneratedPassword = generatePassword() 
        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(autoGeneratedPassword, saltRounds);

        const newClient = new User({
          client_id: clientId,
          company_name: reqObj.company_name,
          contact_person: reqObj.contact_person,
          email: reqObj.email,
          phone: reqObj.phone,
          address: reqObj.address,
          password: hashedPassword, 
          token: token,
          status: 1,
        });
    
        await newClient.save();
    
        callback({
          code: 200,
          message: 'Registration Successful',
          password: autoGeneratedPassword, 
        });
      } catch (error) {
        console.error(error);
        callback({ code: 500, message: 'Internal Server Error' });
      }
    },
    

 }

   





      

     
  




  